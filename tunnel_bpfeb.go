// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tunnelIn6Addr struct{ In6U struct{ U6Addr8 [16]uint8 } }

// loadTunnel returns the embedded CollectionSpec for tunnel.
func loadTunnel() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TunnelBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tunnel: %w", err)
	}

	return spec, err
}

// loadTunnelObjects loads tunnel and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tunnelObjects
//	*tunnelPrograms
//	*tunnelMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTunnelObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTunnel()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tunnelSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelSpecs struct {
	tunnelProgramSpecs
	tunnelMapSpecs
}

// tunnelSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelProgramSpecs struct {
	SetTunnelRemote *ebpf.ProgramSpec `ebpf:"set_tunnel_remote"`
}

// tunnelMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tunnelMapSpecs struct {
	TunnelRemotes *ebpf.MapSpec `ebpf:"tunnel_remotes"`
}

// tunnelObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelObjects struct {
	tunnelPrograms
	tunnelMaps
}

func (o *tunnelObjects) Close() error {
	return _TunnelClose(
		&o.tunnelPrograms,
		&o.tunnelMaps,
	)
}

// tunnelMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelMaps struct {
	TunnelRemotes *ebpf.Map `ebpf:"tunnel_remotes"`
}

func (m *tunnelMaps) Close() error {
	return _TunnelClose(
		m.TunnelRemotes,
	)
}

// tunnelPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTunnelObjects or ebpf.CollectionSpec.LoadAndAssign.
type tunnelPrograms struct {
	SetTunnelRemote *ebpf.Program `ebpf:"set_tunnel_remote"`
}

func (p *tunnelPrograms) Close() error {
	return _TunnelClose(
		p.SetTunnelRemote,
	)
}

func _TunnelClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tunnel_bpfeb.o
var _TunnelBytes []byte
